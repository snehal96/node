{
  "name": "expressworks",
  "version": "2.0.4",
  "description": "Express.js workshop based on workshopper and inspired by stream-adventure by @substack and @maxogden.",
  "main": "expressworks.js",
  "author": {
    "name": "Azat Mardanov",
    "url": "@azat_co"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/azat-co/expressworks.git"
  },
  "keywords": [
    "express.js",
    "node.js",
    "javascript",
    "nodeschool.io"
  ],
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/azat-co/expressworks/issues"
  },
  "bin": {
    "expressworks": "./expressworks.js"
  },
  "preferGlobal": true,
  "dependencies": {
    "body-parser": "^1.12.0",
    "express": "^4.11.2",
    "jade": "^1.9.2",
    "stylus": "^0.50.0",
    "superagent": "~0.15.7",
    "through2": "^0.6.3",
    "workshopper": "^2.3.1",
    "workshopper-exercise": "^2.3.0"
  },
  "readme": "expressworks\n============\n\nExpress.js workshop based on [workshopper](https://github.com/rvagg/workshopper) and inspired by [stream-adventure](https://github.com/substack/stream-adventure) by [@substack](https://twitter.com/substack) and [@maxogden](https://twitter.com/maxogden). ExpressWorks will provide you with tasks and hints. You write the solutions to these problems. Then, after you wrote a solution as an Express.js app, ExpressWorks will verify your solution to the problem.\n\n![Hello World Express.js app](https://raw.github.com/azat-co/expressworks/master/images/hello-world.png)\n\n## Contributors\n\n\n```\n    19  Christophe Porteneuve\n     3  Harry Moreno\n     3  Charlotte Spencer\n     2  Thomas Burette\n     2  intrueder\n     2  Kevin Jayanthan\n     1  Louis Pilfold\n     1  Rich Trott\n     1  Richard Kho\n     1  Ryan Kois\n     1  Timothy Gu\n     1  Wojciech Gawronski\n     1  brownman\n     1  Alessandro Lensi\n     1  raj\n     1  Ayman Mahfouz\n     1  Daniel Geier\n     1  Dylan Smith\n     1  Finn\n     1  Giuseppe\n     1  Jessie Shi\n     1  Jonny Arnold\n```\n\nMake a PR to see your name here. ;-)\n\nPS: via `git shortlog -n -s`\n\n## Installation (recommended)\n\nRecommended global installation:\n\n```bash\n$ npm install express\n$ npm install -g expressworks\n$ expressworks\n```\n\n\nIf you see errors, try:\n\n```bash\n$ sudo npm install -g expressworks\n```\n\n## Local Installation (advanced)\n\nRun & install locally:\n\n```bash\n$ mkdir node_modules\n$ npm install expressworks\n$ cd node_modules/expressworks\n$ node expressworks\n```\n\n# Usage\n*Note*: ExpressWorks depends on a local copy of express being available. Make sure to do\n`npm install express` to do the exercises.\n\nExpressWorks understands these commands:\n\n```\nUsage\n\n  expressworks\n    Show a menu to interactively select a workshop.\n  expressworks list\n    Show a newline-separated list of all the workshops.\n  expressworks select NAME\n    Select a workshop.\n  expressworks current\n    Show the currently selected workshop.\n  expressworks run program.js\n    Run your program against the selected input.\n  expressworks verify program.js\n    Verify your program against the expected output.\n```\n\n# Reset\n\nIf you want to reset the list of completed tasks, clean the `~/.config/expressworks/completed.json` file.\n\n![Hello World Express.js app](https://raw.github.com/azat-co/expressworks/master/images/finished.png)\n\n# More Information\n\nCheck out [Express.js Guide](http://expressjsguide.com).\n\n# Steps\n\n\n## Hello World\n\nCreate an Express.js app that runs on localhost:3000, and outputs \"Hello World!\" when somebody goes to root '/home'.\n\n`process.argv[2]` will be provided by expressworks to you, this is the port number.\n\n## Jade\n\nCreate an Express.js app with a home page (/home) rendered by jade template engine, that shows current date (toDateString).\n\n\n## Good Old Form\n\nWrite a route ('/form') that processes HTML form input (<form><imput name=\"str\"/></form>) and prints backwards the str value.\n\n## Static\n\nApply static middleware to server index.html file without any routes. The index.html file is provided and usable via `process.argv[3]` value of the path to it. However, you can use your own file with this content:\n\n```html\n  <html>\n    <head>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"/main.css\"/>\n    </head>\n    <body>\n      <p>I am red!</p>\n    </body>\n  </html>\n```\n\n## Stylish CSS\n\nStyle your HTML from previous example with some Stylus middleware. The path to main.styl file is provided in `process.argv[3]` or you can create your own file/folder from these:\n\n```css\n  p\n    color red\n```\n\nThe index.html file:\n\n```html\n  <html>\n    <head>\n      <title>expressworks</title>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"/main.css\"/>\n    </head>\n    <body>\n      <p>I am red!</p>\n    </body>\n  </html>\n```\n\n## Param Pam Pam\n\nCreate an Express.js server that processes PUT `/message/:id` requests, e.g., PUT `/message/526aa677a8ceb64569c9d4fb`.\n\nAs the response of this request return id SHA1 hashed with a date:\n\n```javascript\n  require('crypto')\n    .createHash('sha1')\n    .update(new Date().toDateString().toString() + id)\n    .digest('hex')\n```\n\n## What's in Query\n\nWrite a route that extracts data from query string in the GET `/search` URL route, e.g., `?results=recent&include_tabs=true`, and then transforms outputs it back to the user in JSON format.\n\n## JSON Me\n\nWrite a server that reads a file (file name is passed in `process.argv[3]`), parses it to JSON and outputs the content to the user with `res.json(object)`.\n\n",
  "readmeFilename": "README.md",
  "gitHead": "9f9fc126595a34a7e8afc7f6da0237fe6ba855be",
  "homepage": "https://github.com/azat-co/expressworks#readme",
  "_id": "expressworks@2.0.4",
  "_shasum": "1696514deb0eba6132bc6c49d30b0cf75378541e",
  "_from": "expressworks",
  "_resolved": "file:expressworks"
}
